package #handler-package#;

import java.util.Collection;

import org.eclipse.core.commands.AbstractHandler;
import org.eclipse.core.commands.ExecutionEvent;
import org.eclipse.core.commands.ExecutionException;
import org.eclipse.core.commands.IHandler;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.emf.ecore.resource.ResourceSet;
import org.eclipse.emf.ecore.resource.impl.ResourceSetImpl;
import org.eclipse.core.resources.IFile;
import org.eclipse.emf.common.util.URI;

import org.eclipse.jface.dialogs.MessageDialog;
import org.eclipse.jface.viewers.IStructuredSelection;
import org.eclipse.swt.widgets.Display;
import org.eclipse.ui.handlers.HandlerUtil;
import org.eclipse.viatra2.emf.incquery.runtime.exception.IncQueryRuntimeException;

import #java-matcher-package#;
import #java-signature-package#;

public class #java-class-name# extends AbstractHandler implements IHandler {

	@Override
	public Object execute(ExecutionEvent event) throws ExecutionException {
		//returns the selected element
		IStructuredSelection selection = (IStructuredSelection) HandlerUtil.getCurrentSelection(event);
		Object firstElement = selection.getFirstElement();
		//the filter is set in the command declaration no need for type checking
		IFile file = (IFile)firstElement;
		
		//Loads the resource
		ResourceSet resourceSet = new ResourceSetImpl();
		URI fileURI = URI.createPlatformResourceURI(file.getFullPath()
				.toString(), false);
		Resource res = resourceSet.getResource(fileURI, true);
	
		String matches = getMatches(res);
		
		//prints the match set to a dialog window 
		MessageDialog.openInformation(Display.getCurrent().getActiveShell(), "Match set of the #pattern-name# pattern", 
				matches);
		
	    return null;
	}
	
	/**
	 * Returns the match set of the #pattern-name# pattern on the input EMF resource
	 * @param res the container of the EMF model on which the pattern matching is invoked
	 * @return The serialised form of the match set
	 */
	private String getMatches(Resource res){
		//the match set will be serialised into a string builder
		StringBuilder builder = new StringBuilder();
		
		if(res != null)
		{	
			try {
				//get all matches of the pattern
				#java-matcher# matcher = #java-matcher#.FACTORY.getMatcher(res);
				Collection<#java-signature#> matches = matcher.getAllMatchesAsSignature();
				//serialises the current match into the string builder
				if(matches.size() > 0)
					for(#java-signature# match: matches)
						{builder.append(match.toString());
						 builder.append("\n");
						}
				else
					builder.append("The #pattern-name# pattern has an empty match set.");	
				
			} catch (IncQueryRuntimeException e) {
				// Error handling
				e.printStackTrace();
			}
		}
		//returns the match set in a serialised form
		return builder.toString();
	}
}
