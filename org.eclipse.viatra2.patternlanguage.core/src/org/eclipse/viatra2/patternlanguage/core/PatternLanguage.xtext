/*******************************************************************************
 * Copyright (c) 2011 Zoltan Ujhelyi and Daniel Varro
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    Zoltan Ujhelyi - initial API and implementation
 *******************************************************************************/
grammar org.eclipse.viatra2.patternlanguage.core.PatternLanguage with org.eclipse.xtext.xbase.Xbase

generate patternLanguage "http://www.eclipse.org/viatra2/patternlanguage/core/PatternLanguage"

import "platform:/resource/org.eclipse.xtext.xbase/model/Xbase.ecore" as xbase
import "platform:/resource/org.eclipse.xtext.common.types/model/JavaVMTypes.ecore" as types

PatternModel:
	patterns+=Pattern*;
	
Pattern:
	annotations+=Annotation*
	//modifiers+=Modifiers*
	'pattern'
	name=ID
	'('
	(parameters+=Parameter (',' parameters+=Parameter)*)?
	')'
	'='
	bodies+=PatternBody	('or' bodies+=PatternBody)*
;

Annotation:
	'@'
	name=ID
	('(' parameters+=AnnotationParameter (',' parameters+=AnnotationParameter)* ')')?
;

AnnotationParameter:
	name=ID
	'='
	value = STRING
;

Modifiers: 
	injective?='injective'
;

//terminal ID:
//	('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

Variable: //; returns types::JvmIdentifiableElement: 
	{Variable}
	name=ID
	(':' type=Type)?
;

Parameter returns Variable: 
	name=ID
	(':' type=Type)?
;

VariableReference:
	var = ID
;

//These types are not meant to be written directly, just in the desc languages
Type returns Type:
	{EntityType}
	typename=ID
;

//These types are not meant to be written directly, just in the desc languages
RefType returns Type:
	{RelationType}
	typename=ID
;


PatternBody returns PatternBody:
{PatternBody}
    (name=ID)?
	'{'
	  ((constraints += Constraint ';'))+
	'}'
;

Constraint returns Constraint:
	//CheckConstraint |
	PatternCompositionConstraint | PathExpressionConstraint
;


PatternCompositionConstraint returns Constraint:
	{PatternCompositionConstraint}
	negative?='neg'?
	'find'
	patternRef = [Pattern]
	'('
	  (parameters+=VariableReference (',' parameters+=VariableReference)*)?
	')'
;

CheckConstraint returns Constraint:
	{CheckConstraint}
	'check' '(' expression = XExpression ')'
;

PathExpressionConstraint returns Constraint:
	{PathExpressionConstraint}
	negative?='neg'?
	head=PathExpressionHead
;

PathExpressionHead returns PathExpressionElement:
	{PathExpressionHead}
	type = Type '.' tail = PathExpressionTail '('src=VariableReference ',' dst=ValueReference ')'
;

PathExpressionTail returns PathExpressionElement:
	{PathExpressionTail}
	type = RefType ('[' index=INT ']')? closure?='*'? ('.' tail = PathExpressionTail)?
;

ValueReference:
	IntValue | StringValue | VariableValue
;

IntValue returns ValueReference:
	{IntValue}
	value = INT
;

StringValue returns ValueReference:
	{StringValue}
	value = STRING
;

VariableValue returns ValueReference:
	{VariableValue}
	value = VariableReference
;
