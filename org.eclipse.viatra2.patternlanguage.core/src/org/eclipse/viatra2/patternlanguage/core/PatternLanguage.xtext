grammar org.eclipse.viatra2.patternlanguage.core.PatternLanguage with org.eclipse.xtext.xbase.Xbase

generate patternLanguage "http://www.eclipse.org/viatra2/patternlanguage/core/PatternLanguage"

import "platform:/resource/org.eclipse.xtext.xbase/model/Xbase.ecore" as xbase

PatternModel:
	patterns+=Pattern*;
	
Pattern:
	annotations+=Annotation*
	modifiers+=Modifiers*
	'pattern'
	name=ID
	'('
	(parameters+=Parameter (',' parameters+=Parameter)*)?
	')'
	'='
	bodies+=PatternBody	('or' bodies+=PatternBody)*
;

Annotation:
	'@'
	name=ID
;

Modifiers:
	shareable?='shareable' 
;

Parameter returns Variable: 
	name=ID
	(':' type=Type)?
;

VariableReference:
	var = [Variable]
;

Type returns Type:
	typename=ID
;

RefType returns Type:
	typename=ID
;


PatternBody returns PatternBody:
{PatternBody}
    (name=ID)?
	'{'
	  (constraints += Constraint ';')+
	'}'
;

Constraint returns Constraint:
	CheckConstraint | PatternCompositionConstraint | ExpressionConstraint
;


PatternCompositionConstraint returns Constraint:
	{PatternCompositionConstraint}
	negative?='neg'?
	'find'
	patternRef = [Pattern]
	'('
	  (parameters+=VariableReference (',' parameters+=VariableReference)*)?
	')'
;

CheckConstraint returns Constraint:
	{CheckConstraint}
	'check' '(' expression = XExpression ')'
;

ExpressionConstraint returns Constraint:
	{ExpressionConstraint}
	negative?='neg'?
	head=ExpressionHead
;

ExpressionHead:
	type = Type '.' tail = ExpressionTail '('src=VariableReference ',' dst=VariableReference ')'
;

ExpressionTail:
	type = RefType ('[' index=INT ']')? closure?='*'? ('.' tail = ExpressionTail)?
;

